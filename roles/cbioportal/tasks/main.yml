---
- name: cBioPortal | Install git
  apt: name={{ item }} update_cache=yes cache_valid_time=3600 state=present
  with_items:
  - git
  - maven

- name: cBioPortal | Clone the repository
  git:
    repo: "{{cbioportal_repository}}"
    dest: "{{build_dir}}"
    version: "{{cbioportal_version}}"

- name: cBioPortal | Copy any files we need to edit
  command: cp "{{item.src}}" "{{item.dest}}" chdir="{{build_dir}}" creates="{{build_dir}}/{{item.dest}}"
  with_items:
    - {src: "src/main/resources/portal.properties.EXAMPLE", dest: "portal.properties"}
    - {src: "src/main/resources/log4j.properties.EXAMPLE", dest: "log4j.properties"}

- name: cBioPortal | Patch portal.properties
  lineinfile:
    dest: "{{build_dir}}/portal.properties"
    regexp: '^{{item.key}}\s*=\s*(.*)$'
    line: "{{item.key}}={{item.value}}"
    state: present
    insertafter: EOF
    backrefs: no
  with_items: "{{portal_settings}}"

- name: cBioPortal | Copy the second portal.properties file
  command: cp "{{item.src}}" "{{item.dest}}" chdir="{{build_dir}}" creates="{{build_dir}}/{{item.dest}}"
  with_items:
    - {src: "portal.properties", dest: "src/main/resources/portal.properties"}
    - {src: "log4j.properties", dest: "src/main/resources/log4j.properties"}

## Question. Should we run this with idempotence? I'm thinking not, because the
## repository might have changed. Best to clean and do a complete build,
## at least until we have a better way. That will typically involve using something
## which doesn't even compile.

- name: cBioPortal | Build
  command: >
    env PORTAL_HOME={{build_dir}} mvn clean compile test package -Ddb.test.username={{mysql_database_user}} -Ddb.test.password={{mysql_database_password}}
    chdir="{{build_dir}}"

## Detecting the version is a little bit complex. We need to evaluate and extract
## a given string. This is a sneaky way to do it in Maven. Note that we pipe in and
## use interactive as that allows us to prefix and therefore detect the version
## in a huge mess of Maven logging.
##
## We'll also need to use a Jinja2 filter to remove the prefix value from here on.

- name: cBioPortal | Detect version in pom.xml
  shell: >
    echo 'version=${project.version}' | mvn -N org.apache.maven.plugins:maven-help-plugin:2.1.1:evaluate | grep "^version="
    chdir="{{build_dir}}"
  register: cbioportal_version

- name: cBioPortal | Create directories
  command: mkdir -p {{ item.path }} creates={{ item.path }}
  with_items:
    - { path: '{{webapp_directory}}' }
    - { path: '{{webapp_log_directory}}' }
    - { path: '{{webapp_pid_directory}}' }

- name: cBioPortal | Copy the built portal
  command: >
    cp {{build_dir}}/portal/target/cbioportal-{{cbioportal_version.stdout | replace('version=', '')}}.war {{webapp_directory}}
    creates={{webapp_directory}}/cbioportal-{{cbioportal_version.stdout | replace('version=', '')}}.war

- name: cBioPortal | Download Jetty
  get_url:
    dest: '{{jetty_target}}'
    url: '{{jetty_url}}'

- name: cBioPortal | Copy the built portal.properties file
  command: cp "{{item.src}}" "{{item.dest}}" chdir="{{build_dir}}" creates="{{build_dir}}/{{item.dest}}"
  with_items:
    - {src: "portal.properties", dest: "{{webapp_directory}}/portal.properties"}
    - {src: "log4j.properties", dest: "{{webapp_directory}}/log4j.properties"}

- name: cBioPortal | Write configuration files
  template: src={{ item.src }} dest={{ item.dest }} mode={{ item.mode }}
  notify:
    - restart service
  with_items:
    - { src: "cbioportal.xml.j2", dest: "{{webapp_directory}}/cbioportal.xml", mode: '0755' }
    - { src: "override-web.xml.j2", dest: "{{webapp_directory}}/override-web.xml", mode: '0755' }
